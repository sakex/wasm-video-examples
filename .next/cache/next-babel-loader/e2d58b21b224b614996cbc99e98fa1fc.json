{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nexport default class _class extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"feedSocket\", () => {\n      this.socket.on(\"turnPlayer\", () => {}).on(\"cards\", cards => this.setState[cards]).on(\"state\", state => this.setState(state));\n    });\n\n    this.socket = props.socket;\n    this.state = {\n      cards: [],\n      currentPlayer: -1,\n      dealer: -1,\n      highestBet: -1,\n      firstHighestPlayer: -1\n    };\n    this.feedSocket();\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"button\", {\n      onClick: () => this.socket.emit(\"join\")\n    }, \"join\"), __jsx(\"button\", {\n      onClick: () => this.socket.emit(\"leave\")\n    }, \"leave\"), __jsx(\"button\", {\n      onClick: () => this.socket.emit(\"start\")\n    }, \"start\"), __jsx(\"button\", {\n      onClick: () => this.socket.emit(\"check\")\n    }, \"Check\"), __jsx(\"button\", {\n      onClick: () => this.socket.emit(\"checkOrPass\")\n    }, \"Check or Pass\"), __jsx(\"button\", {\n      onClick: () => this.socket.emit(\"pass\")\n    }, \"Pass\"), __jsx(\"button\", {\n      onClick: () => this.socket.emit(\"follow\")\n    }, \"Follow\"), __jsx(\"button\", {\n      onClick: () => this.socket.emit(\"raise\")\n    }, \"Raise\"), __jsx(\"div\", null, \"Cards: \", this.state.cards), __jsx(\"div\", null, this.state.currentPlayer), __jsx(\"div\", null, this.state.currentPlayer));\n  }\n\n}\n\n_defineProperty(_class, \"turnSeconds\", 0);","map":{"version":3,"sources":["/home/olivier/web_conf/wasm-video-examples/components/poker.jsx"],"names":["React","Component","constructor","props","socket","on","cards","setState","state","currentPlayer","dealer","highestBet","firstHighestPlayer","feedSocket","render","emit"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,eAAe,qBAAcA,SAAd,CAAwB;AAInCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,wCAcN,MAAM;AAEf,WAAKC,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAM,CAClC,CADD,EAEKA,EAFL,CAEQ,OAFR,EAEkBC,KAAD,IAAW,KAAKC,QAAL,CAAcD,KAAd,CAF5B,EAGKD,EAHL,CAGQ,OAHR,EAGkBG,KAAD,IAAW,KAAKD,QAAL,CAAcC,KAAd,CAH5B;AAIH,KApBkB;;AAEf,SAAKJ,MAAL,GAAcD,KAAK,CAACC,MAApB;AACA,SAAKI,KAAL,GAAa;AACTF,MAAAA,KAAK,EAAC,EADG;AAETG,MAAAA,aAAa,EAAC,CAAC,CAFN;AAGTC,MAAAA,MAAM,EAAC,CAAC,CAHC;AAITC,MAAAA,UAAU,EAAC,CAAC,CAJH;AAKTC,MAAAA,kBAAkB,EAAC,CAAC;AALX,KAAb;AAOA,SAAKC,UAAL;AACH;;AAYDC,EAAAA,MAAM,GAAG;AACL,WACI,4BACI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKV,MAAL,CAAYW,IAAZ,CAAiB,MAAjB;AAAvB,cADJ,EAEI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKX,MAAL,CAAYW,IAAZ,CAAiB,OAAjB;AAAvB,eAFJ,EAGI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKX,MAAL,CAAYW,IAAZ,CAAiB,OAAjB;AAAvB,eAHJ,EAKI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKX,MAAL,CAAYW,IAAZ,CAAiB,OAAjB;AAAvB,eALJ,EAMI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKX,MAAL,CAAYW,IAAZ,CAAiB,aAAjB;AAAvB,uBANJ,EAOI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKX,MAAL,CAAYW,IAAZ,CAAiB,MAAjB;AAAvB,cAPJ,EAQI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKX,MAAL,CAAYW,IAAZ,CAAiB,QAAjB;AAAvB,gBARJ,EASI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKX,MAAL,CAAYW,IAAZ,CAAiB,OAAjB;AAAvB,eATJ,EAUI,8BAAa,KAAKP,KAAL,CAAWF,KAAxB,CAVJ,EAWI,mBAAM,KAAKE,KAAL,CAAWC,aAAjB,CAXJ,EAYI,mBAAM,KAAKD,KAAL,CAAWC,aAAjB,CAZJ,CADJ;AAmBH;;AA/CkC;;uCAEd,C","sourcesContent":["import React, {Component} from \"react\"\n\nexport default class extends Component {\n\n    static turnSeconds = 0;\n\n    constructor(props) {\n        super(props);\n        this.socket = props.socket;\n        this.state = {\n            cards:[],\n            currentPlayer:-1,\n            dealer:-1,\n            highestBet:-1,\n            firstHighestPlayer:-1\n        };\n        this.feedSocket();\n    }\n\n\n    feedSocket = () => {\n\n        this.socket.on(\"turnPlayer\", () => {\n        })\n            .on(\"cards\", (cards) => this.setState[cards])\n            .on(\"state\", (state) => this.setState(state))\n    };\n\n\n    render() {\n        return (\n            <>\n                <button onClick={() => this.socket.emit(\"join\")}>join</button>\n                <button onClick={() => this.socket.emit(\"leave\")}>leave</button>\n                <button onClick={() => this.socket.emit(\"start\")}>start</button>\n\n                <button onClick={() => this.socket.emit(\"check\")}>Check</button>\n                <button onClick={() => this.socket.emit(\"checkOrPass\")}>Check or Pass</button>\n                <button onClick={() => this.socket.emit(\"pass\")}>Pass</button>\n                <button onClick={() => this.socket.emit(\"follow\")}>Follow</button>\n                <button onClick={() => this.socket.emit(\"raise\")}>Raise</button>\n                <div>Cards: {this.state.cards}</div>\n                <div>{this.state.currentPlayer}</div>\n                <div>{this.state.currentPlayer}</div>\n                {/*\n\n                */}\n            </>\n        );\n    }\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}